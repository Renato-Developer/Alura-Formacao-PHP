Que o PDO é uma abstração para acesso a diversos bancos de dados
Que, para acessar cada um dos bancos, um driver específico é necessário
Que os drivers são habilitados através da instalação de extensões no PHP
Que SQLite é um gerenciador de banco de dados que não precisa de um servidor
A criar a nossa primeira conexão com um banco de dados

Ao tentar buscar dados do banco de dados, você pode informar como quer que os métodos do PDO formatem esses dados pra você. Os principais fetch modes ou fetch styles são:

PDO::FETCH_ASSOC: Retorna cada linha como um array associativo, onde a chave é o nome da coluna, e o valor é o valor da coluna em si
PDO::FETCH_BOTH (esse é o padrão): Retorna cada linha como um array com as chaves sendo tanto o índice da coluna (começando do 0) quanto o nome da coluna, ou seja, os valores acabam ficando duplicados nesse formato
PDO::FETCH_CLASS: Cada linha do resultado é retornado como uma instância da classe especificada em outro parâmetro. A classe não pode ter parâmetros no construtor e cada coluna terá o seu valor atribuído a uma propriedade de mesmo nome no objeto criado
PDO::FETCH_INTO: Funciona de forma muito semelhante ao FETCH_CLASS, mas ao invés de criar o objeto para você, ele preenche um objeto já criado com os valores buscados
PDO::FETCH_NUM: Retorna cada linha como um array, onde a chave é o índice numérico da coluna, começando do 0, e o valor é o valor da coluna em si
Para ver os demais modos de busca e ler com mais detalhes os explicados aqui, você pode conferir a documentação oficial do PHP:

A executar queries sem precisar conferir os seus resultados, como queries de INSERT, utilizando o método exec
Que o método exec retorna apenas o número de linhas afetadas, e não o resultado de uma query em si
A buscar dados no banco, utilizando o método query
Os diversos métodos para recuperar dados utilizando o PDO:
fetch
fetchObject
fetchColumn
fetchAll
Os diferentes Fetch Modes do PHP, ou seja, as diferentes formas de trazer dados do banco para o PHP

O que é SQL Injection e como realizar esse ataque em nossa aplicação
Que adicionar parâmetros na string SQL é perigoso
A resolver esse problema, utilizando Prepared Statements
Que prepared statements podem inclusive ajudar na performance da aplicação
As diferenças entre bindValue e bindParam para vincular parâmetros aos prepared statements
Que podemos informar o tipo de dado que estamos passando através do PDO, utilizando o terceiro parâmetro de bindValue e bindParam


A class Student foi criada em cima de um padrão muito conhecido que é o Entity que representa o Student como uma entidade
entidade significa que ele tem uma identidade unica onde cada student é reconhecido atravéz de seu id ou qualquer atributo
unico, então isso o torna uma entidade e geralmente essa classe precisa ser persistida em algum lugar... e com isso 
faremos uso de outro padrão de projeto pra criar algo que a persista num banco de dados por exemplo

"Exemplos claros de objetos que exigem uma identidade incluem: Uma pessoa; Um pedido. [...]
 Esses conceitos têm uma identidade que perdura ao longo do tempo. 
 Não importa quantas vezes os dados destes conceitos sejam alterados, suas identidades permanecem as mesmas.
É isso que as torna Entidades."

OBS:: utilizamos na infraestrutura de banco de dados um padrão muito pouco conhecido que é o ...
Static Creation Method Ou método de criação estático;  ;

O que aplicamos no último vídeo é um padrão de projeto chamado Static Creation Method. 
Ele é usado quando extraímos a lógica de criação de um objeto para um método estático específico para isso.